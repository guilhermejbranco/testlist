{"version":3,"sources":["components/AddItemBox.js","components/ItemOptions.js","components/Item.js","components/ItemsList.js","components/TodoStats.js","App.js","index.js"],"names":["AddItemBox","react_default","a","createElement","className","type","placeholder","onKeyPress","this","onInputEnter","bind","e","key","item","target","value","props","addNewItem","Component","ItemOptions","onClick","todoList","i","found","length","splice","updateList","Item","name","task","listClass","completed","currentTask","completeTask","components_ItemOptions","list","ItemsList","todos","items","listItem","map","components_Item","indexOf","TodoStats","finished","percent","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","percentDone","done","assertThisInitialized","updateListAfterDeletion","addItem","components_TodoStats","components_AddItemBox","components_ItemsList","_this2","push","setState","countFinishedTasks","listItems","_this3","localStorage","setItem","updateFromLocalStorage","percentCompletion","JSON","stringify","totalTasks","finishedTasks","Math","floor","isNaN","_this4","defaultProps","getItem","val","parse","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.fc7493d8.chunk.js","sourcesContent":["// Packages\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport '../App.css';\n\nclass AddItemBox extends Component {\n    render() {\n        // We use bind(this) to bind the function within this component\n        return (\n            <div className='AddItemBox'>\n                <input\n                    type='text'\n                    placeholder='Add a gift...'\n                    onKeyPress={this.onInputEnter.bind(this)}\n                />\n            </div>\n        );\n    }\n\n    onInputEnter(e) {\n        if (e.key === 'Enter') {\n            let item = e.target.value;\n            // Now add it to the 'items' array state\n            this.props.addNewItem(item);\n            // On enter, remove the value from the input\n            e.target.value = '';\n        }\n    }\n}\n\nAddItemBox.propTypes = {\n    addNewItem: PropTypes.func\n}\n\nexport default AddItemBox;\n","// Packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport '../App.css';\n\nconst ItemOptions = (props) => {\n    const removeItem = (e) => {\n        let todoList = props.todoList,\n            i = 0,\n            found = false;\n        // Remove this todo from the array\n        while (i < todoList.length && !found) {\n            if (props.item === todoList[i]) {\n              todoList.splice(i, 1); // remove that item from array\n              found = true;\n            } else {\n              i++;\n            }\n        }\n        // Then call the update local storage method\n        props.updateList(todoList);\n    };\n\n    // Return\n    return (\n        <div className=\"TaskOptions\">\n            <button onClick={removeItem}>\n                <span className=\"fa fa-trash\"></span>\n            </button>\n        </div>\n    );\n};\n\nItemOptions.propTypes = {\n  item: PropTypes.object,\n  completeTask: PropTypes.func,\n  updateList: PropTypes.func\n}\n\nexport default ItemOptions;\n","// Packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components and Styles\nimport ItemOptions from './ItemOptions';\nimport '../App.css';\n\nconst Item = (props) => {\n    // Marks x task as done\n    const markDone = () => {\n        let currentTask = props.item;\n        props.completeTask(currentTask);\n    };\n\n    // Cache Values\n    let name = props.item.task,\n        completed = props.item.completed,\n        listClass = (completed) ? 'done' : '';\n\n    // return\n    return (\n        <li className={listClass}>\n            <div className=\"ItemDiv\" onClick={markDone}>\n                <p>{name}</p>\n            </div>\n            <ItemOptions\n                item={props.item}\n                todoList={props.list}\n                updateList={props.updateList}\n            />\n        </li>\n    );\n};\n\nItem.propTypes = {\n    list: PropTypes.array,\n    item: PropTypes.object,\n    completeTask: PropTypes.func,\n    updateList: PropTypes.func\n}\n\nexport default Item;\n","// Packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components and Styles\nimport Item from './Item';\nimport '../App.css';\n\nconst ItemsList = (props) => {\n    let todos = props.items;\n    const listItem = todos.map((item) => {\n        return (\n            <Item\n                item={item}\n                key={todos.indexOf(item)}\n                list={todos}\n                completeTask={props.completeTask}\n                updateList={props.updateList}\n            />\n        );\n    });\n    return (\n        <div className=\"ItemsList\">\n            <ul>\n                {listItem}\n            </ul>\n        </div>\n    );\n};\n\nItemsList.propTypes = {\n  items: PropTypes.array,\n  completeTask: PropTypes.func,\n  updateList: PropTypes.func\n}\n\nexport default ItemsList;\n","// Packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport '../App.css';\n\nconst TodoStats = (props) => {\n  return (\n    <div className=\"TodoStats\">\n      <p className=\"stats\"><span>{props.list.length}</span> Gifts</p>\n      <p className=\"stats\"><span>{props.finished}</span> Assigned Gifts</p>\n      <p className=\"stats-percent\"><span>{props.percent}%</span> Assigned</p>\n    </div>\n  );\n};\n\nTodoStats.propTypes = {\n    list: PropTypes.array,\n    finished: PropTypes.number,\n    percent: PropTypes.number\n}\n\nexport default TodoStats;\n","// Packages\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport AddItemBox from './components/AddItemBox';\nimport ItemsList from './components/ItemsList';\nimport TodoStats from './components/TodoStats';\nimport './App.css';\n\n// 7:30am on June 13\n\n/*\n * HOW IT WORKS\n * 1. Types in the input box\n * 2. User presses Enter\n * 3. At 'ENTER', grab the input value\n * 4. Push it to the App \"items\" state array\n * 5. Re-render the ItemList component\n * 6. User can see the change\n * Use binds the addItem event so it changes the state in this comp\n */\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todoList: props.todos || [],\n            finished: props.finished || 0,\n            percentDone: props.done || 0\n        };\n        this.completeTask = this.completeTask.bind(this);\n        this.updateListAfterDeletion = this.updateListAfterDeletion.bind(this);\n        this.addItem = this.addItem.bind(this);\n    }\n\n    render() {\n        let todoList = this.state.todoList;\n        return (\n            <div className=\"App\">\n                <h2>List</h2>\n                <TodoStats\n                    list={todoList}\n                    finished={this.state.finished}\n                    percent={this.state.percentDone}\n                />\n                <AddItemBox addNewItem={this.addItem}/>\n                <ItemsList\n                    items={todoList}\n                    completeTask={this.completeTask}\n                    updateList={this.updateListAfterDeletion}\n                />\n            </div>\n        );\n    }\n\n    // Adds item to app's 'items' state\n    addItem(item) {\n        let todoList = this.state.todoList,\n            task = {task: item, completed: false};\n        todoList.push(task);\n        this.setState({todoList}, () => {\n            this.countFinishedTasks();\n        });\n    }\n\n    // Marks a task as completed\n    completeTask(task) {\n        let listItems = this.state.todoList;\n        for (let i = 0; i < listItems.length; i++) {\n            if (listItems[i] === task) {\n                listItems[i].completed = !listItems[i].completed;\n                this.countFinishedTasks();\n                break;\n            }\n        }\n    }\n\n    // Counts Completed tasks and updates state and localstorage object\n    countFinishedTasks() {\n        let listItems = this.state.todoList;\n        let finished = 0;\n        for (let i = 0; i < listItems.length; i++) {\n            if (listItems[i].completed) {\n                finished++;\n            }\n        }\n        this.setState({ finished }, () => {\n            localStorage.setItem('finished', finished);\n            this.updateFromLocalStorage();\n            this.percentCompletion();\n        });\n    }\n\n    // Stores todoList in localStorage object\n    updateFromLocalStorage() {\n        localStorage.setItem('todos', JSON.stringify(this.state.todoList));\n    }\n\n    // Calculates % of completed tasks\n    percentCompletion() {\n        let totalTasks = this.state.todoList.length,\n            finishedTasks = this.state.finished,\n            percentDone = Math.floor((finishedTasks / totalTasks) * 100);\n        percentDone = isNaN(percentDone) ? 0 : percentDone;\n        this.setState({percentDone}, () => {\n            localStorage.setItem('done', percentDone);\n        });\n    }\n\n    // Updates list after deletion of a task\n    updateListAfterDeletion(todoList) {\n        this.setState({todoList}, () => {\n            this.countFinishedTasks();\n        });\n    }\n}\n\nApp.propTypes = {\n  todos: PropTypes.array,\n  finished: PropTypes.number,\n  percent: PropTypes.number\n}\n\nApp.defaultProps = {\n  todos: [],\n  finished: 0,\n  percent: 0\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n// Gets Item from localStorage\nlet getItem = (val) => {\n  return JSON.parse(localStorage.getItem(val));\n};\nconst props = {\n  todos: getItem('todos'),\n  finished: getItem('finished'),\n  done: getItem('done')\n};\n\nReactDOM.render(<App {...props}/>, document.getElementById('app'));\n"],"sourceRoot":""}